// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  email          String         @unique
  organizationId String?
  password       String?
  token          String?
  provider       String?
  username       String?
  confirmedAt    DateTime?
  profile        Profile?
  organization   Organization?
  contributors   Contributor[]
  assignTasks    AssignTask[]
  authProviders  AuthProvider[]
}

model Contributor {
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  deletedAt      DateTime?
  id             String                  @id @default(uuid())
  role           RoleContributorRole     @default(SUPERADMIN)
  user           User                    @relation(fields: [userId], references: [id])
  userId         String
  confirmation   ContributorConfirmation @default(CHOOSE)
  confirmedAt    DateTime?
  organizationId String
  organization   Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  tasks          Task[]
}

enum RoleContributorRole {
  SUPERADMIN
  ADMIN
}

enum ContributorConfirmation {
  YES
  NO
  CHOOSE
}

model Profile {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  firstName   String
  lastName    String?
  address     String?
  phone       String?
  photo       String?
  companyName String?
  occupation  String?
  color       String?
  url         String?
  description String?   @db.Text
  birthday    DateTime?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  id           String         @id @default(uuid())
  name         String?
  image        String?
  logo         String?
  description  String?        @db.Text
  userId       String         @unique
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  contributors Contributor[]
  tasks        Task[]
  treatments   Treatment[]
  deaths       Death[]
  feedings     Feeding[]
  sellings     Sale[]
  finances     Finance[]
  locations    Location[]
  assignTasks  AssignTask[]
  batch        Batch[]
  eggHavesting EggHavesting[]
  incubation   Incubation[]
}

model ContactUs {
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  id          String    @id @default(uuid())
  fullName    String
  email       String
  phone       String?
  subject     String?
  description String?
}

model AuthProvider {
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  id         String    @id @default(uuid())
  email      String?
  name       String?
  providerId String?
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  title          String
  slug           String
  dueDate        DateTime
  status         TaskStatus   @default(TODO)
  description    String       @db.Text
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contributorId  String
  contributor    Contributor  @relation(fields: [contributorId], references: [id], onDelete: Cascade)
  userCreatedId  String
  assignTasks    AssignTask[]
}

enum TaskStatus {
  TODO
  INPROGRESS
  DONE
}

model AssignTask {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  taskId         String
  task           Task         @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Location {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  manger         Int
  through        Int
  number         Int
  type           BirdType
  squareMeter    Int
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  batch          Batch[]
}

model Batch {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  quantity       Int
  weight         Int
  type           BirdType
  locationId     String
  location       Location       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
  eggHavesting   EggHavesting[]
  incubation     Incubation[]
  sale           Sale[]
  feeding        Feeding[]
  death          Death[]
  treatment      Treatment[]
}

enum BirdType {
  BROILERS
  LAYERS
  TURKEYS
  DUCKS
  QUAILS
}

model Treatment {
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  id             String           @id @default(uuid())
  name           String?
  date           DateTime?
  note           String?
  slug           String?
  dose           Int?
  diagnosis      String
  medication     MedicationTypes?
  method         MethodTreatment?
  batchId        String
  batch          Batch            @relation(fields: [batchId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum MethodTreatment {
  INJECTION
  ORAL
  NASAL
  FEEDANDWATER
  EYE
}

enum MedicationTypes {
  ANTIBIOTICS
  ANTIPARASITICS
  ANTIFUNGALS
  ANTIVIRALS
  ANTHALMITICS
  COCCIDIOSTATS
  VACCINS
  ANALGESICS
  CORTICOSTEROIDS
  BRONCODILATORS
  PROBIOTICS
  MINERALVITAMINS
  GROWTHPROMOTER
  TROPICALTREATMENTS
  OTHERS
}

model Death {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  number         Int
  batchId        String
  batch          Batch        @relation(fields: [batchId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Feeding {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  quantity       Int?
  feedType       FeedType
  batchId        String
  batch          Batch        @relation(fields: [batchId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum FeedType {
  CONCENTRATES
  ROUGHAGES
  PROTEINS
  MINERALSALTS
  VITAMINS
  COMPLETEFEED
  FIBERS
  ENERGYSUPPLIMENTS
  BYPRODUCTS
  SYNTHETICADICTIVES
  OTHERS
}

model Sale {
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  id             String         @id @default(uuid())
  date           DateTime?
  note           String?        @db.Text
  phone          String?
  email          String?
  address        String?
  quantity       Int?
  type           BirdType
  price          Int?
  soldTo         String?
  method         sellingMethod?
  batchId        String
  batch          Batch          @relation(fields: [batchId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum sellingMethod {
  SOCIALMEDIA
  MARKET
  INFARM
  AUCTION
  CONTRACT
  OTHER
}

model Finance {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  type           financeType?
  slug           String
  amount         Int?
  detail         String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

enum financeType {
  INCOME
  EXPENSE
}

model EggHavesting {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  quantity       Int?
  size           Int?
  batchId        String
  batch          Batch        @relation(fields: [batchId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}

model Incubation {
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  id             String       @id @default(uuid())
  date           DateTime?
  note           String?      @db.Text
  quantity       Int?
  dueDate        DateTime
  batchId        String
  batch          Batch        @relation(fields: [batchId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userCreatedId  String
}
